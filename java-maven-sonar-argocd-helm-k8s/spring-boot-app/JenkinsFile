pipeline{
    agent{
        docker{
        image 'abhishekf5/maven-abhishek-docker-agent:v1'
        args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    stages{

        stage('checkout'){
            steps{
                sh 'echo checkout passed'
            }
           
        }
        
        stage('Build and Test'){
            steps{
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean install'
            }
        }

        stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://65.0.131.171:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
     stage('Docker Push Image'){
            environment{
                DOCKER_IMAGE="bijjampoorna/ultimate-ci-cd:${BUILD_NUMBER}"
                REGISTRY_CREDENTIALS= credentials('docker-cred')
            }
            steps{
                script{
                    sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app&& docker build -t ${DOCKER_IMAGE} .'
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/'',"docker-cred"){
                        dockerImage.push()
                    }
                }

            }


        }
}
}
